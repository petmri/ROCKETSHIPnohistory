function [f, gof, output] = model_fxr(Ct,Cp,timer,R1o,R1i,r1,fw,prefs)

% Use Curvefitting tool box instead of optimization toolbox (lsqcurvefit)
% as curvefitting will easily return confidence intervals on the fit
% performance of the two appears to be the same
options = fitoptions('Method', 'NonlinearLeastSquares',...
    'Algorithm', 'Trust-Region',...
    'MaxIter', prefs.MaxIter,...
    'MaxFunEvals', prefs.MaxFunEvals,...
    'TolFun', prefs.TolFun,...
    'TolX', prefs.TolX,...
    'Display', 'off',...
    'Lower',[prefs.lower_limit_ktrans prefs.lower_limit_ve prefs.lower_limit_tau],...
    'Upper', [prefs.upper_limit_ktrans prefs.upper_limit_ve prefs.upper_limit_tau],...
    'StartPoint', [prefs.initial_value_ktrans prefs.initial_value_ve prefs.initial_value_tau],...
    'Robust', prefs.Robust);
ft = fittype('model_fxr_cfit( Ktrans, ve, tau, Cp, T1, R1o, R1i, r1, fw)',...
    'independent', {'T1', 'Cp'},...
    'coefficients',{'Ktrans', 've', 'tau'},...
    'problem',{'R1o', 'R1i','r1','fw'});
[f, gof, output] = fit([(timer), (Cp')],(Ct),ft, options,'problem',{R1o,R1i,r1,fw});
confidence_interval = confint(f,0.95);
% toc

%Calculate the R2 fit
x(1) = f.Ktrans;			% ktrans
x(2) = f.ve;				% ve
x(3) = f.tau;				% tau
x(4) = gof.sse;				% residual
x(5) = confidence_interval(1,1);% (95 lower CI of ktrans)
x(6) = confidence_interval(2,1);% (95 upper CI of ktrans)
x(7) = confidence_interval(1,2);% (95 lower CI of ve)
x(8) = confidence_interval(2,2);% (95 upper CI of ve)
x(9) = confidence_interval(1,3);% (95 lower CI of tau)
x(10) = confidence_interval(2,3);% (95 upper CI of tau)

residuals = output.residuals;